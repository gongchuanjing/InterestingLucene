Spring



2.	Web mvc

 

1、	用户发起request请求至控制器Spring(Controller)
控制接收用户请求的数据，委托给模型进行处理
2、	控制器通过模型(Model)处理数据并得到处理结果
模型通常是指业务逻辑
3、	控制器将模型数据在视图(View)中展示
web中模型无法将数据直接在视图上显示Spring，需要通过控制器完成。如果在C/S应用中模型是可以将数据在视图中展示的。
4、	控制器将视图response响应给用户
通过视图展示给用户要的数据或处理结果。




3.	Spring web mvc 架构
架构图

 

流程
1、	用户发送请求至前端控制器DispatcherServlet
2、	DispatcherServlet收到请求调用HandlerMapping处理器映射器。
3、	处理器映射器找到具体的处理器，生成处理器对象及处理器Spring拦截器(如果有则生成)一并返回给DispatcherServlet。
4、	DispatcherServlet调用HandlerAdapter处理器适配器
5、	HandlerAdapter经过适配调用具体的Spring处理器(Controller，也叫后端控制器)。
6、	Controller执行完成返回ModelAndView
7、	HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet
8、	DispatcherServlet将ModelAndView传给ViewReslover视图解析器
9、	ViewReslover解析后返回具体View
10、	DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。
11、	DispatcherServlet响应用户

组件说明：
以下组件通常使用框架提供实现：
DispatcherServlet：作为前端控制器，整个流Spring程控制的中心，控制其它组Spring件执行，统一调度，降Spring低组件之间的耦合性，提高每个组件的扩展性。
HandlerMapping：通过扩展处理Spring器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。
HandlAdapter：通过扩展处理器适配器，支持更Spring多类型的处理器。
ViewResolver：通过扩展视图Spring解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。
